Computational law is a branch of legal informatics concerned with the mechanization of legal reasoning (whether done by humans or by computers). It emphasizes explicit behavioral constraints and eschews implicit rules of conduct. Importantly, there is a commitment to a level of rigor in specifying laws that is sufficient to support entirely mechanical processing.
Philosophically, computational law sits within the Legal Formalist school of jurisprudence. Given its emphasis on rigorously specified laws, computational law is most applicable in civil law settings, where laws are taken more or less literally. It is less applicable to legal systems based on common law, which provides more scope for unspecified normative considerations. However, even in common law systems, computational law still has relevance in the case of categorical statutes and in settings where the handling of cases has resulted in de facto rules.
From a pragmatic perspective, computational law is important as the basis for computer systems capable of doing useful legal calculations, such as compliance checking, legal planning, regulatory analysis, and so forth. Some systems of this sort already exist. TurboTax is a good example. And the potential is particularly significant now due to recent technological advances â€“ including the prevalence of the Internet in human interaction and the proliferation of embedded computer systems (such as smart phones, self-driving cars, and robots).
